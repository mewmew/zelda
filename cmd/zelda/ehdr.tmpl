; === [ ELF file header ] ======================================================

; ELF classes.
ELFCLASS32 equ 1 ; 32-bit architecture.

; Data encodings.
ELFDATA2LSB equ 1 ; 2's complement little-endian.

; Object file types.
ET_EXEC equ 2 ; Executable.
ET_DYN  equ 3 ; Shared object.

; CPU architectures.
EM_386 equ 3 ; Intel i386.

_text.start equ {{ .Entry }}

ehdr:

	db      0x7F, "ELF"	; ident.magic: ELF magic number.
	db      ELFCLASS32	; ident.class: File class.
	db      ELFDATA2LSB	; ident.data: Data encoding.
	db      1	; ident.version: ELF header version.
	db      0, 0, 0, 0, 0, 0, 0, 0, 0	; ident.pad: Padding.
{{- if .IsSharedLib }}
	dw      ET_DYN	; type: File type.
{{- else }}
	dw      ET_EXEC	; type: File type.
{{- end }}
	dw      EM_386	; machine: Machine architecture.
	dd      1	; version: ELF format version.
	dd      _text.start	; entry: Entry point.
	dd      phdr_off	; phoff: Program header file offset.
	dd      shdr_off	; shoff: Section header file offset.
	dd      0	; flags: Architecture-specific flags.
	dw      ehdr.size	; ehsize: Size of ELF header in bytes.
	dw      phdr.entsize	; phentsize: Size of program header entry.
	dw      phdr.count	; phnum: Number of program header entries.
	dw      shdr.entsize	; shentsize: Size of section header entry.
	dw      shdr.count	; shnum: Number of section header entries.
	dw      shdr.shstrtab_idx	; shstrndx: Section name strings section.

.size equ $ - ehdr

; === [/ ELF file header ] =====================================================

