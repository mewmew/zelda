; === [ Section headers ] ======================================================

; Section header types.
SHT_NULL     equ 0  ; inactive
SHT_PROGBITS equ 1  ; program defined information
SHT_STRTAB   equ 3  ; string table section
SHT_DYNAMIC  equ 6  ; dynamic section
SHT_REL      equ 9  ; relocation section - no addends
SHT_DYNSYM   equ 11 ; dynamic symbol table section

; Section header flags.
SHF_WRITE     equ 0x01 ; Section contains writable data.
SHF_ALLOC     equ 0x02 ; Section occupies memory.
SHF_EXECINSTR equ 0x04 ; Section contains instructions.
SHF_INFO_LINK equ 0x40 ; sh_info holds section index.

shdr_off equ shstrtab_off + round(shstrtab.size, 4)

shdr:

  .null:
	dd      0        ; name:      Section name (index into the section header string table).
	dd      SHT_NULL ; type:      Section type.
	dd      0        ; flags:     Section flags.
	dd      0        ; addr:      Address in memory image.
	dd      0        ; off:       Offset in file.
	dd      0        ; size:      Size in bytes.
	dd      0        ; link:      Index of a related section.
	dd      0        ; info:      Depends on section type.
	dd      0        ; addralign: Alignment in bytes.
	dd      0        ; entsize:   Size of each entry in section.

.entsize equ $ - shdr

  .interp:
	dd      shstrtab.interp_off ; name:      Section name (index into the section header string table).
	dd      SHT_PROGBITS        ; type:      Section type.
	dd      SHF_ALLOC           ; flags:     Section flags.
	dd      interp              ; addr:      Address in memory image.
	dd      interp_off          ; off:       Offset in file.
	dd      interp.size         ; size:      Size in bytes.
	dd      0                   ; link:      Index of a related section.
	dd      0                   ; info:      Depends on section type.
	dd      0x1                 ; addralign: Alignment in bytes.
	dd      0                   ; entsize:   Size of each entry in section.

  .dynamic:
	dd      shstrtab.dynamic_off  ; name:      Section name (index into the section header string table).
	dd      SHT_DYNAMIC           ; type:      Section type.
	dd      SHF_WRITE | SHF_ALLOC ; flags:     Section flags.
	dd      dynamic               ; addr:      Address in memory image.
	dd      dynamic_off           ; off:       Offset in file.
	dd      dynamic.size          ; size:      Size in bytes.
	dd      shdr.dynstr_idx       ; link:      Index of a related section.
	dd      0                     ; info:      Depends on section type.
	dd      0x4                   ; addralign: Alignment in bytes.
	dd      dynamic.entsize       ; entsize:   Size of each entry in section.

  .dynstr:
	dd      shstrtab.dynstr_off ; name:      Section name (index into the section header string table).
	dd      SHT_STRTAB          ; type:      Section type.
	dd      SHF_ALLOC           ; flags:     Section flags.
	dd      dynstr              ; addr:      Address in memory image.
	dd      dynstr_off          ; off:       Offset in file.
	dd      dynstr.size         ; size:      Size in bytes.
	dd      0                   ; link:      Index of a related section.
	dd      0                   ; info:      Depends on section type.
	dd      0x1                 ; addralign: Alignment in bytes.
	dd      0                   ; entsize:   Size of each entry in section.

  .dynsym:
	dd      shstrtab.dynsym_off ; name:      Section name (index into the section header string table).
	dd      SHT_DYNSYM          ; type:      Section type.
	dd      SHF_ALLOC           ; flags:     Section flags.
	dd      dynsym              ; addr:      Address in memory image.
	dd      dynsym_off          ; off:       Offset in file.
	dd      dynsym.size         ; size:      Size in bytes.
	dd      shdr.dynstr_idx     ; link:      Index of a related section.
	dd      0                   ; info:      Depends on section type.
	dd      0x4                 ; addralign: Alignment in bytes.
	dd      dynsym.entsize      ; entsize:   Size of each entry in section.

  .rel_plt:
	dd      shstrtab.rel_plt_off      ; name:      Section name (index into the section header string table).
	dd      SHT_REL                   ; type:      Section type.
	dd      SHF_ALLOC | SHF_INFO_LINK ; flags:     Section flags.
	dd      rel_plt                   ; addr:      Address in memory image.
	dd      rel_plt_off               ; off:       Offset in file.
	dd      rel_plt.size              ; size:      Size in bytes.
	dd      shdr.dynsym_idx           ; link:      Index of a related section.
	dd      shdr.got_plt_idx          ; info:      Depends on section type.
	dd      0x4                       ; addralign: Alignment in bytes.
	dd      rel_plt.entsize           ; entsize:   Size of each entry in section.

  .got_plt:
	dd      shstrtab.got_plt_off        ; name:      Section name (index into the section header string table).
	dd      SHT_PROGBITS                ; type:      Section type.
	dd      SHF_WRITE | SHF_ALLOC       ; flags:     Section flags.
	dd      got_plt                     ; addr:      Address in memory image.
	dd      got_plt_off                 ; off:       Offset in file.
	dd      got_plt.size                ; size:      Size in bytes.
	dd      0                           ; link:      Index of a related section.
	dd      0                           ; info:      Depends on section type.
	dd      0x4                         ; addralign: Alignment in bytes.
	dd      got_plt.entsize             ; entsize:   Size of each entry in section.

plt_entsize equ 4 ; 32-bit entry.

  .plt:
	dd      shstrtab.plt_off            ; name:      Section name (index into the section header string table).
	dd      SHT_PROGBITS                ; type:      Section type.
	dd      SHF_ALLOC | SHF_EXECINSTR   ; flags:     Section flags.
	dd      plt                         ; addr:      Address in memory image.
	dd      plt_off                     ; off:       Offset in file.
	dd      plt.size                    ; size:      Size in bytes.
	dd      0                           ; link:      Index of a related section.
	dd      0                           ; info:      Depends on section type.
	dd      0x10                        ; addralign: Alignment in bytes.
	dd      plt_entsize                 ; entsize:   Size of each entry in section.

{{ range . }}
  .{{ .Name }}:
	dd      shstrtab.{{ .Name }}_off	; name:      Section name (index into the section header string table).
	dd      SHT_PROGBITS	; type:      Section type.
	dd      {{ .Flags }}	; flags:     Section flags.
	dd      {{ .Name }}	; addr:      Address in memory image.
	dd      {{ .Name }}_off	; off:       Offset in file.
	dd      {{ .Name }}.size	; size:      Size in bytes.
	dd      0	; link:      Index of a related section.
	dd      0	; info:      Depends on section type.
	dd      0x10	; addralign: Alignment in bytes.
	dd      0	; entsize:   Size of each entry in section.
{{ end }}

  .shstrtab:
	dd      shstrtab.shstrtab_off ; name:      Section name (index into the section header string table).
	dd      SHT_STRTAB            ; type:      Section type.
	dd      0x0                   ; flags:     Section flags.
	dd      0                     ; addr:      Address in memory image.
	dd      shstrtab_off          ; off:       Offset in file.
	dd      shstrtab.size         ; size:      Size in bytes.
	dd      0                     ; link:      Index of a related section.
	dd      0                     ; info:      Depends on section type.
	dd      0x1                   ; addralign: Alignment in bytes.
	dd      0                     ; entsize:   Size of each entry in section.

.null_idx	equ (.null - shdr) / .entsize
.interp_idx	equ (.interp - shdr) / .entsize
.dynamic_idx	equ (.dynamic - shdr) / .entsize
.dynstr_idx	equ (.dynstr - shdr) / .entsize
.dynsym_idx	equ (.dynsym - shdr) / .entsize
.rel_plt_idx	equ (.rel_plt - shdr) / .entsize
.got_plt_idx	equ (.got_plt - shdr) / .entsize
.plt_idx	equ (.plt - shdr) / .entsize
{{- range . }}
.{{ .Name }}_idx	equ (.{{ .Name }} - shdr) / .entsize
{{- end }}
.shstrtab_idx	equ (.shstrtab - shdr) / .entsize

shdr.size  equ $ - shdr
shdr.count equ shdr.size / shdr.entsize

; === [/ Section headers ] =====================================================
